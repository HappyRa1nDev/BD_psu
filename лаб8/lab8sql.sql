CREATE TABLE startups
(
	startup_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	user_name varchar NOT NULL unique,
	startup_name varchar NOT NULL
);
CREATE TABLE investors
(
	investor_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	user_name varchar NOT NULL unique,
	investor_name varchar NOT NULL
);
CREATE TABLE startup_investor
(
	startup_investor_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	startup_id integer REFERENCES startups(startup_id),
	investor_id integer REFERENCES investors(investor_id),
	money integer NOT NULL
);

INSERT INTO startups (startup_name,user_name) VALUES
		('MobileAPP','mobileapp_log'),
		('NoApple','noapple_man'),
		('aida64','aida_top'),
		('Keksu_ot_antona','keks_boy');
INSERT INTO investors (investor_name,user_name) VALUES
		('Microsoft','micro_boys'),
		('Apple','apple_best'),
		('Yandex','russia_boys');
INSERT INTO startup_investor (startup_id,investor_id,money) VALUES
		(1,1,700),(1,2,200),(2,1,1000),(2,2,3000),(2,3,5000),(3,3,100),(4,1,250),(4,2,350),(4,3,450);

CREATE ROLE adminRole SUPERUSER; -- админ
CREATE ROLE startupRole NOINHERIT; --стартап (меняет только таблицу стартап)
CREATE ROLE investorRole NOINHERIT; --инвестор(меняет инвестиции)
CREATE ROLE viewerRole NOINHERIT; --сторонний наблюдатель(может только смотреть списко инвестиций)

-- отмена всех привелегий у всех пользователей бд кроме админов
revoke all on database "bd_lab8" from PUBLIC;

--случайный человек зашел на сайт, не авторизовавшись. Может только посмотреть информацию  по startup_investor
CREATE OR REPLACE VIEW show_startup_investor AS
SELECT startups.startup_name,investors.investor_name,money FROM startup_investor
		JOIN startups  ON startup_investor.startup_id = startups.startup_id JOIN investors ON investors.investor_id=startup_investor.investor_id;

GRANT SELECT ON show_startup_investor TO viewerRole;

DROP USER IF EXISTS randomMan;
CREATE USER randomMan;
GRANT viewerRole TO randomMan;
SET ROLE randomMan;

--Посмотреть инфу о всех инвестициях
SELECT * FROM show_startup_investor;
--Посмотреть все стартапы(ошибка)
SELECT * FROM startups;
RESET ROLE;


--Информация об инвесторах
--Полчуаем стартапы, в которые вложились
CREATE OR REPLACE VIEW show_my_startups AS
SELECT startups.startup_name,money FROM startups
	JOIN startup_investor ON startups.startup_id = startup_investor.startup_id
    JOIN investors ON startup_investor.investor_id = investors.investor_id
                                   WHERE investors.investor_name=current_user;
--Получить совй ID
CREATE OR REPLACE VIEW getMyInvId AS
	SELECT investor_id FROM investors WHERE user_name=user;
--Инвестор может упровлять только своими ивнестициями
CREATE POLICY invest_select_policy ON startup_investor FOR SELECT TO investorRole USING (TRUE);
CREATE  POLICY invest_insert_policy ON startup_investor FOR INSERT TO investorRole  WITH CHECK (investor_id=(SELECT getMyInvId.investor_id FROM getMyInvId));
CREATE  POLICY invest_update_policy ON startup_investor FOR UPDATE TO investorRole USING (investor_id=(SELECT getMyInvId.investor_id FROM getMyInvId));
CREATE  POLICY invest_delete_policy ON startup_investor FOR DELETE TO investorRole USING (investor_id=(SELECT getMyInvId.investor_id FROM getMyInvId));

DROP policy invest_select_policy ON startup_investor;
DROP policy invest_insert_policy ON startup_investor;
DROP policy invest_update_policy ON startup_investor;
DROP policy invest_delete_policy ON startup_investor;
--выдаем возможности
GRANT SELECT,UPDATE,INSERT,DELETE ON startup_investor TO investorRole;
GRANT SELECT ON show_my_startups TO investorRole;
GRANT SELECT ON getMyInvId TO investorRole;

--Тестируем
DROP USER IF EXISTS micro_boys;
CREATE USER micro_boys;
GRANT investorRole TO micro_boys;

ALTER TABLE startup_investor ENABLE ROW LEVEL SECURITY;
SET ROLE micro_boys;

SELECT * FROM startup_investor WHERE startup_id=1 AND investor_id=1;
SELECT * FROM startup_investor;
--попытка обновить без прав
UPDATE startup_investor SET money=777 WHERE startup_id=1 AND investor_id=2;
--обновляем по правам
UPDATE startup_investor SET money=777 WHERE startup_id=1 AND investor_id=1;
--Вставка без прав
INSERT INTO startup_investor (startup_id, investor_id, money) VALUES (1,1,777);
--Вставка с правами
INSERT INTO startup_investor (startup_id, investor_id, money) VALUES (1,2,777);
--удаление Всех записей где денег больше 500
DELETE FROM startup_investor WHERE money>500;

RESET ROLE;
ALTER TABLE startup_investor DISABLE ROW LEVEL SECURITY;

--Стартапы
--
CREATE OR REPLACE VIEW getStartupID AS
	SELECT startup_id FROM startups WHERE user_name=user;

CREATE POLICY startup_select_policy ON startups  FOR SELECT TO startupRole USING (TRUE);
CREATE POLICY startup_update_policy ON startups  FOR UPDATE TO startupRole USING (startup_id=(SELECT getStartupID.startup_id FROM getStartupID));

GRANT SELECT,UPDATE ON startups TO startupRole;
GRANT SELECT ON getStartupID TO startupRole;
--тестировние

DROP USER IF EXISTS mobileapp_log;
CREATE USER mobileapp_log;
GRANT startupRole TO mobileapp_log;

ALTER TABLE startups ENABLE ROW LEVEL SECURITY;
SET ROLE mobileapp_log;
--селект
SELECT * FROM startups;
--update не удачно
UPDATE startups SET startup_name='aaaaaaaaaaaaaaaa' WHERE startup_id=3;
--update удачно
UPDATE startups SET startup_name='aaaaaaaaaaaaaaaa' WHERE startup_id=1;

RESET ROLE;
ALTER TABLE startups DISABLE ROW LEVEL SECURITY;

DROP TABLE startup_investor CASCADE;
DROP TABLE investors CASCADE;
DROP TABLE startups CASCADE;

DROP ROLE adminRole;
DROP ROLE startupRole;
DROP ROLE investorRole ;
DROP ROLE viewerRole;

