--Создание БД
CREATE TABLE startups
(
	startup_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	startup_name varchar NOT NULL
);
CREATE TABLE investors
(
	investor_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	investor_name varchar NOT NULL
);
CREATE TABLE startup_investor
(
	startup_investor_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	startup_id integer REFERENCES startups(startup_id),
	investor_id integer REFERENCES investors(investor_id),
	money integer NOT NULL
);

INSERT INTO startups (startup_name) VALUES
		('MobileAPP'),
		('NoApple'),
		('aida64'),
		('Keksu_ot_antona');
INSERT INTO investors (investor_name) VALUES
		('Microsoft'),
		('Apple'),
		('Yandex');

INSERT INTO startup_investor (startup_id,investor_id,money) VALUES
		(1,1,700),(1,2,200),(2,1,1000),(2,2,3000),(2,3,5000),(3,3,100),(4,1,250),(4,2,350),(4,3,450);
--

--функция для вставки
CREATE OR REPLACE FUNCTION onInsertFunc()
	RETURNS trigger LANGUAGE plpgsql
AS $$
DECLARE
	inv_id integer;
    start_id integer;
BEGIN
    inv_id = (SELECT investor_id FROM investors WHERE investor_name=new.investor_name);
    start_id = (SELECT startup_id FROM startups WHERE startup_name=new.startup_name);
    --проверим наличие записи в инвестициях
    IF NOT EXISTS(SELECT * FROM startup_investor WHERE startup_id=start_id AND investor_id = inv_id)
	THEN
	--Добавим стартап, если его нет
	IF NOT EXISTS (SELECT * FROM startups  WHERE startup_name= new.startup_name)
	THEN
		INSERT INTO startups(startup_name) VALUES(new.startup_name);
	END IF;
	--Добавим инвестора, если его нет
	IF NOT EXISTS (SELECT * FROM investors WHERE investor_name = new.investor_name)
	THEN
		INSERT INTO investors(investor_name) VALUES(new.investor_name);
	END IF;
	--Добавим инвсетицию
	inv_id = (SELECT investor_id FROM investors WHERE investor_name=new.investor_name);
    start_id = (SELECT startup_id FROM startups WHERE startup_name=new.startup_name);

	INSERT INTO startup_investor(investor_id,startup_id,money) VALUES(inv_id,start_id,new.money);
	END IF;
	RETURN NULL;
END
$$;

--функция для обновления
CREATE OR REPLACE FUNCTION onUpdateFunc()
	RETURNS trigger LANGUAGE plpgsql
AS $$
DECLARE
	inv_id integer;
    start_id integer;
BEGIN
    IF NOT EXISTS (SELECT * FROM startups WHERE startup_name=new.startup_name)
    THEN
	UPDATE startups SET startup_name = new.startup_name WHERE startup_name = old.startup_name;
	END IF;
    IF NOT EXISTS (SELECT * FROM investors WHERE investor_name=new.investor_name)
    THEN
	UPDATE investors SET investor_name= new.investor_name WHERE investor_name = old.investor_name;
    END IF;
	inv_id = (SELECT investor_id FROM investors WHERE investor_name=new.investor_name);
    start_id = (SELECT startup_id FROM startups WHERE startup_name=new.startup_name);

	UPDATE startup_investor SET money=new.money WHERE investor_id=inv_id AND startup_id = start_id;

	RETURN NULL;
END
$$;

--функция для удаления
CREATE OR REPLACE FUNCTION onDeleteFunc()
	RETURNS trigger LANGUAGE plpgsql
AS $$
DECLARE
	inv_id integer;
    start_id integer;
BEGIN
    inv_id = (SELECT investor_id FROM investors WHERE investor_name=old.investor_name);
    start_id = (SELECT startup_id FROM startups WHERE startup_name=old.startup_name);

	DELETE FROM startup_investor
	where investor_id = inv_id AND startup_id=start_id AND money =old.money;
	RETURN NULL;
END
$$;

--Создадим VIEW
CREATE OR REPLACE VIEW view_table AS
SELECT startup_name,investor_name, money
FROM startups
JOIN startup_investor ON startups.startup_id = startup_investor.startup_id
JOIN investors ON investors.investor_id= startup_investor.investor_id;

--тригер вставки
CREATE TRIGGER view_insert
    INSTEAD OF  INSERT ON view_table
    FOR EACH ROW
    EXECUTE FUNCTION onInsertFunc();

--тригер обновления
CREATE TRIGGER view_update
    INSTEAD OF  UPDATE ON view_table
    FOR EACH ROW
    EXECUTE FUNCTION onUpdateFunc();

--тригер удаления
CREATE TRIGGER view_delete
    INSTEAD OF DELETE ON view_table
    FOR EACH ROW
    EXECUTE FUNCTION onDeleteFunc();

--тестирование
--выведм что есть
SELECT * FROM view_table;

--Тестируем вставку
--Ничего не вставит
INSERT INTO view_table(startup_name,investor_name,money) VALUES('MobileAPP','Microsoft',777);
--Добавит записи во все нужные таблицы
INSERT INTO view_table(startup_name,investor_name,money) VALUES('крутойСтартап','Крутой_инвестор',777);

--Тестируем обновление
UPDATE view_table SET money = 999 WHERE investor_name = 'Microsoft';
UPDATE view_table SET investor_name='Apple' WHERE money =999;
UPDATE view_table SET investor_name='kek' WHERE money =999;
UPDATE view_table SET startup_name='новый стартап' WHERE startup_name = 'Keksu_ot_antona';

--тестируем удаление
DELETE FROM view_table WHERE startup_name = 'новый стартап';




DROP VIEW view_table;
DROP FUNCTION onInsertFunc;
DROP FUNCTION onUpdateFunc;
DROP FUNCTION onDeleteFunc;
DROP TABLE startup_investor CASCADE;
DROP TABLE investors CASCADE;
DROP TABLE startups CASCADE;
